<div class="row networkViewRow">

  <div class="col-md-3">
    <div class="box box-primary">
      <div class="box-header with-border">
        <h3 class="box-title">Details</h3>
      </div>
      <div class="box-body">
        <form role="form">
	  <div class="form-group">
	    <label>Id</label>
	    <input id="id" type="text" class="form-control" placeholder="Id">
            <button id="SaveWorkflow" type="button" class="btn btn-block btn-primary">Save</button>
	  </div>
	</form>
      </div>
      <div class="box-footer">
      </div>
    </div>
  </div>

  <div class="col-md-9">
    <div class="box box-primary">
      <div class="box-header with-border">
        <h3 class="box-title">Flow</h3>
	<button id="OpenNewStepView" type="button" class="btn btn-block btn-primary">Add New Step</button>
      </div>
      <div class="box-body">
        <div id="mynetwork" style="height:400px"></div>
      </div>
      <div class="box-footer">
      </div>
    </div>
  </div>

</div>

<div class="row stepEditorRow" style="display:none">

  <div class="col-md-4">
    <div class="box box-info">
      <div class="box-body pad">
        <div class="form-group">
          <label for="ParentSteps">Parents</label>
          <select id="ParentSteps" name="ParentSteps" class="form-control select2" multiple="multiple" style="width:100%">
	  </select>
	</div>
      </div>
    </div>
  </div>

  <div class="col-md-4">
    <div class="box box-info">
      <div class="box-body pad">
        <button type="button" class="openWorkflowView btn btn-block btn-secondary">Go Back</button>
        <button id="saveStep" type="button" class="btn btn-block btn-primary">Save</button>
      </div>
    </div>
  </div>

  <div class="col-md-4">
    <div class="box box-info">
      <div class="box-body pad">
        <div class="form-group">
          <label for="ChildSteps">Children</label>
          <select id="ChildSteps" name="ChildSteps" class="form-control select2" multiple="multiple" style="width:100%">
	  </select>
	</div>
      </div>
    </div>
  </div>

</div>

<div class="row stepEditorRow" style="display:none">

  <div class="col-md-4">

    <div class="box box-info">
      <div class="box-header">
        <h3 class="box-title">Incoming Event</h3>
        <a href="#" class="pull-right" id="incoming_data_editor_save">[Save]</a>
        <a href="#" class="pull-right" id="incoming_data_editor_load">[Load]</a>
      </div>
      <div class="box-body pad">
        <div id="incoming_data_editor"></div>
      </div>
    </div>

  </div>

  <div class="col-md-4">

    <div class="box box-info">
      <div class="box-header">
        <h3 class="box-title">Step</h3>
      </div>
      <div class="box-body pad">
        <div id="step_editor"></div>
      </div>
    </div>

  </div>

  <div id="outgoingEvents" class="col-md-4">

    <div class="box box-info">
      <div class="box-header">
        <h3 class="box-title">Action</h3>
      </div>
      <div class="box-body pad">
        <div class="row">
          <div class="col-md-6">
            Event Limit
            <select id="eventLimit" name="EventLimit" class="form-control">
              <option>5</option>
              <option>10</option>
              <option>50</option>
              <option>100</option>
            </select>
          </div>
          <div class="col-md-6">
            <button id="runStep" type="button" class="btn btn-block btn-primary">Run</button>
            <div id="runStepMessage"></div>
          </div>
        </div>
      </div>
    </div>

    <div id="outgoingEventTemplate" class="box box-info" style="display:none">
      <div class="box-header">
        <h3 class="box-title">Outgoing Event</h3>
        <div class="box-tools pull-right">
          <button type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-minus"></i>
          </button>
        </div>
      </div>
      <div class="box-body pad">
	<span class="eventTitle"></span>
        <button type="button" class="openEventButton btn btn-block btn-primary">Open</button>
        <button type="button" class="jumpEventButton btn btn-block btn-primary">Jump To</button>
        <select class="JumpToSteps form-control" style="width:100%">
        </select>
      </div>
    </div>

  </div>

</div>

<div class="row newStepRow" style="display:none">

  <div class="col-md-4">

    <div class="box box-info">
      <div class="box-header">
        <h3 class="box-title">New Step</h3>
      </div>
      <div class="box-body pad">
        <button type="button" class="openWorkflowView btn btn-block btn-secondary">Cancel</button>
        <label for="newStepId">New Step Id</label>
        <input id="newStepId" name="newStepId" type="text" class="form-control">
        <label for="newStepName">New Step Name</label>
        <input id="newStepName" name="newStepName" type="text" class="form-control">
        <label for="newStepType">New Step Type</label>
        <select id="newStepType" name="newStepType" class="form-control" style="width:100%">
        </select>
        <button type="button" id="AddNewStep" class="btn btn-block btn-primary">Next</button>
      </div>
    </div>

  </div>

</div>

<script type="text/javascript">

var func = function() {

  var stepTypes = [];

  jQuery.get('/workflows/step_types', function(data) {
    stepTypes = data.step_types;

    var options = data.step_types
                      .map(function(x){ return $('<option>').val(x.id).html(x.name) });

    for(var i = 0; i < options.length; i++)
      $('#newStepType').append(options[i]);
  });

  var openWorkflowView = function() {
    $('.stepEditorRow').hide();
    $('.newStepRow').hide();
    $('.networkViewRow').show();
  }

  var incomingEventForANewStep = {};
  var parentStepIdForANewStep = undefined;

  var openNewStepView = function(options) {
    options = options || {};

    var incomingEvent = options.incomingEvent || {};

    incomingEventForANewStep = options.incomingEvent;
    parentStepIdForANewStep = options.parentStepId;

    $('.stepEditorRow').hide();
    $('.newStepRow').show();
    $('.networkViewRow').hide();

  }

  var stepRunner = StepEditor({
    runStepUrl: '/starter/run_step',
    incomingEventEditorId: 'incoming_data_editor',
    stepEditorId: 'step_editor',
    runStepButton: function() { return $('#runStep') },
    afterEachEvent: function(selector, event) {

      var firstChild = $('#ChildSteps').val()[0] || '';
      $(selector + ' .JumpToSteps').val(firstChild);

      $(selector).find('.eventTitle').html(event.message);

      $(selector).find('.openEventButton').click(function(){
        EventModal.popThisEvent(event.id);
      });

      $(selector).find('.jumpEventButton').click(function(){
	var stepId = $(selector).find('.JumpToSteps').val();
	if (stepId == '')
	{
	  openNewStepView( { incomingEvent: event.data, parentStepId: event.step_id } );
	  return;
	}
        var step = stepRunner.findStep(stepId);
        stepRunner.editStep(step, event.data);
      });

    },
    outgoingEvents: function() { return $('#outgoingEvents') },
    outgoingEventTemplate: function() { return $('#outgoingEventTemplate') }
  });


  $.getJSON('/workflows/json/<%= @workflow.id %>', function(data) {

    var workflow = data.workflow;

    for(var i = 0; i < workflow.steps.length; i++)
    {
      workflow.steps[i].label = workflow.steps[i].name || workflow.steps[i].id;
      workflow.steps[i].shape = 'box';
    }

    var edges = new vis.DataSet([]);

    var getEdgeIdFor = function(step, parent_step_id) {
      return step.id + '_' + parent_step_id;
    };

    var loadEdgesFor = function(step) {
      for (var j = 0; j < step.parent_step_ids.length; j++)
        edges.add( {
                     id: getEdgeIdFor(step, step.parent_step_ids[j]),
                     arrows: { from: { enabled: true } },
                     from: step.id,
                     to: step.parent_step_ids[j]
                   } );
    };

    var removeEdgesFor = function(step) {
      if (!step.parent_step_ids) return;

      var edgesToRemove = edges.get({
        filter: function(item){
          return item.to == step.id || item.from == step.id;
        }
      });

      for (var i in edgesToRemove)
	edges.remove(edgesToRemove[i].id);

    };

    for(var i = 0; i < workflow.steps.length; i++)
      if (workflow.steps[i].parent_step_ids)
        loadEdgesFor(workflow.steps[i]);

    var findStep = function(stepId) {
      for(var i = 0; i < workflow.steps.length; i++)
        if (workflow.steps[i].id == stepId)
          return workflow.steps[i];
      return undefined;
    };

    var editStep = function(step, incomingEvent) {

      step = JSON.parse(JSON.stringify(step));
      delete step.method;
      delete step.label;
      $('.stepEditorRow').show();
      $('.newStepRow').hide();
      $('.networkViewRow').hide();
      $('#ParentSteps').val(step.parent_step_ids).trigger('change');

      var childSteps = [];
      for (var i = 0; i < workflow.steps.length; i++)
        if (workflow.steps[i].parent_step_ids && workflow.steps[i].parent_step_ids.includes(step.id))
          childSteps.push(workflow.steps[i].id);
      $('#ChildSteps').val(childSteps).trigger('change');

      delete step.parent_step_ids;
      stepRunner.loadStep(step, incomingEvent);

    };

    stepRunner.findStep = findStep;
    stepRunner.editStep = editStep;

    var nodes = new vis.DataSet(workflow.steps);

    var saveStep = function(newStep, oldStep) {

      removeEdgesFor(oldStep);
      removeEdgesFor(newStep);
      loadEdgesFor(newStep);

      for(var property in newStep)
        oldStep[property] = newStep[property];
      oldStep.label = newStep.name || newStep.id;

      nodes.update(oldStep);
    };

    var container = document.getElementById('mynetwork');
    var options = { layout: { hierarchical: { sortMethod: 'directed', direction: 'DU' } } };
    var data = {
      nodes: nodes,
      edges: edges
    };
    var network = new vis.Network(container, data, options);

    network.on('doubleClick', function(params) {
      var step_id = params.nodes[0];
      var step = findStep(step_id)
      editStep(step);
    });

    $('#saveStep').click(function() {
      var newStep = stepRunner.getStep();
      var oldStep = findStep(newStep.id);

      newStep.parent_step_ids = $('#ParentSteps').val();

      var stepsToUpdate = [];

      stepsToUpdate.push( { newStep: newStep, oldStep: oldStep } );

      var currentParentsOfThisStep = [];
      for (var index in workflow.steps)
        if (workflow.steps[index].parent_step_ids)
	{
          var aStep = workflow.steps[index];
	  if (aStep.parent_step_ids.includes(newStep.id))
          {
	    aStep.parent_step_ids = aStep.parent_step_ids.filter(function(x) { return x != newStep.id } );
            stepsToUpdate.push( { newStep: aStep, oldStep: aStep } );
          }
        }

      var childSteps = $('#ChildSteps').val()
      for (var i = 0; i < childSteps.length; i++){
        var childStepId = childSteps[i];
        var childStep = findStep(childStepId);
        if (childStep)
	{
	  if (!childStep.parent_step_ids)
	    childStep.parent_step_ids = [];
	  if (childStep.parent_step_ids.includes(newStep.id) == false)
	  {
	    childStep.parent_step_ids.push(newStep.id);
            stepsToUpdate.push( { newStep: childStep, oldStep: childStep } );
	  }
	}
      }

      for (var key in stepsToUpdate)
        saveStep(stepsToUpdate[key].newStep, stepsToUpdate[key].oldStep);
    });

    var saveWorkflow = function() {
      jQuery.post('/workflows/json/<%= @workflow.id %>', { workflow: JSON.stringify(workflow) }, function(data) {
        console.log(data);
      });
    };

    var loadAllParentSteps = function(workflow, selector) {
      var parentSteps = workflow.steps
                                .map(function(x){ return { id: x.id, name: x.name } })
                                .map(function(x){ return $('<option>').val(x.id).html(x.name) });
      selector.find('option').remove().end();
      for(var i = 0; i < parentSteps.length; i++)
        selector.append(parentSteps[i]).trigger('change');

      return undefined;
    };
    loadAllParentSteps(workflow, $('#ParentSteps'));
    loadAllParentSteps(workflow, $('#ChildSteps'));
    loadAllParentSteps(workflow, $('.JumpToSteps'));
    $('.JumpToSteps').append($('<option value="">New Step</option>'));

    $('#AddNewStep').click(function(){

      var stepId = $('#newStepId').val();
      var stepType = $('#newStepType').val();

      var fullStepType = {}

      for(var i = 0; i < stepTypes.length; i++)
        if (stepTypes[i].id == stepType)
          fullStepType = stepTypes[i];

      var step = {
                   id: stepId,
                   name: $('#newStepName').val(),
                   label: $('#newStepName').val(),
                   type: stepType,
                   parent_step_ids: [],
                   config: fullStepType.default_config || {}
                 };

      if (parentStepIdForANewStep)
        step.parent_step_ids.push(parentStepIdForANewStep);

      workflow.steps.push(step);
      nodes.add(step);
      loadAllParentSteps(workflow, $('#ParentSteps'));
      loadAllParentSteps(workflow, $('#ChildSteps'));
      loadAllParentSteps(workflow, $('.JumpToSteps'));
      $('.JumpToSteps').append($('<option value="">New Step</option>'));
      editStep(step, incomingEventForANewStep);
    });

    $('#id').val(workflow.id);

    $('#SaveWorkflow').click(saveWorkflow);

  });

  $('.openWorkflowView').click(openWorkflowView);
  $('#OpenNewStepView').click(openNewStepView);
};

jQuery(func);

</script>
